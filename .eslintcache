[{"C:\\Users\\Cosmos\\Desktop\\workspace\\weather-app\\src\\reportWebVitals.js":"1","C:\\Users\\Cosmos\\Desktop\\workspace\\weather-app\\src\\App.js":"2","C:\\Users\\Cosmos\\Desktop\\workspace\\weather-app\\src\\index.js":"3"},{"size":362,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":4334,"mtime":1610455398691,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1ydb5j2",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\Cosmos\\Desktop\\workspace\\weather-app\\src\\reportWebVitals.js",[],["17","18"],"C:\\Users\\Cosmos\\Desktop\\workspace\\weather-app\\src\\App.js",["19","20"],"import React from \"react\";\nimport './App.css';\n\nfunction fetchWeather(lat = 52.7138816, lon = 5.8621951999999995, key){\n  const url = `http://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly&units=metric&appid=${key}`;\n  return  fetch(url)\n    .then((res) => res.json())\n }\n\n function importAll(r) {\n  let images = {};\n  r.keys().map((item, index) => { images[item.replace('./', '')] = r(item); });\n  return images;\n}\n\nconst images = importAll(require.context('./images', false, /\\.(png|jpe?g|svg)$/));\n\nfunction App() {\n  const [loading, setLoading] = React.useState(true)\n  const [error, setError] = React.useState(null)\n  const [weather, setWeather] = React.useState({})\n  const [coordinates, setCoordinates] = React.useState({})\n  const key = '7a80ce5f8e58755c9eb6b72ee83cd819';\n\n  React.useEffect(\n    () => {\n      navigator.geolocation.getCurrentPosition(handleLocation)\n    }, []);\n\n  React.useEffect(() => {\n    fetchWeather(coordinates.latitude, coordinates.longitude, key)\n      .then((fetchedWeather) => {\n        console.log(coordinates.latitude, coordinates.longitude)\n        setWeather(fetchedWeather);\n        setError(null);\n        setLoading(false);\n      })\n      .catch((e) => {\n        console.warn(e.message);\n        setError('Error fetching weather. Try again.');\n        setLoading(false);\n      })\n  }, [coordinates]);\n\n  function handleLocation(pos){\n    setCoordinates({\n      latitude: pos.coords.latitude,\n      longitude: pos.coords.longitude,\n    })\n  }\n\n  if(loading) return <p>Loading</p>;\n\n  if(error){\n    return (\n      <>\n      <p>{error}</p>\n      <button>try again</button>\n      </>\n    )\n  }\n\n  console.log(weather.daily);\n\n  return (\n    !weather ? <p>Loading</p> :\n    <div className=\"App\">\n      <div className=\"today\">\n         <ul>\n           <h1>Today</h1>\n           <li>{weather.current.weather[0].description}</li>\n           <li>{Math.round(weather.current.temp)}°C</li>\n           <li>Feels like : {Math.round(weather.current.feels_like)}°C</li>\n        </ul>\n      </div>\n      <div className=\"tom\">\n        <ul>\n           <h1>Tomorrow</h1>\n           <li>{weather.daily[0].weather[0].description}</li>\n           <li>{Math.round(weather.daily[0].temp.day)}°C</li>\n           <li>Feels like : {Math.round(weather.daily[0].feels_like.day)}°C</li>\n        </ul>\n      </div>\n      <div className=\"DaT\">\n        <ul>\n           <h1>Day after Tomorrow</h1>\n           <li>{weather.daily[1].weather[0].description}</li>\n           <li>{Math.round(weather.daily[1].temp.day)}°C</li>\n           <li>Feels like : {Math.round(weather.daily[1].feels_like.day)}°C</li>\n        </ul>\n      </div>\n      <div className=\"week\">\n        <ul>  \n          <h1>This week!</h1>\n           <li>{new Date(weather.daily[0].dt *1000).toLocaleString(\"en-US\", {weekday: \"long\"})}: Between {Math.round(weather.daily[0].temp.min)}°C and {Math.round(weather.daily[0].temp.max)}°C</li>\n           <li>{new Date(weather.daily[1].dt *1000).toLocaleString(\"en-US\", {weekday: \"long\"})}: Between {Math.round(weather.daily[1].temp.min)}°C and  {Math.round(weather.daily[1].temp.max)}°C</li>\n           <li>{new Date(weather.daily[2].dt *1000).toLocaleString(\"en-US\", {weekday: \"long\"})}: Between {Math.round(weather.daily[2].temp.min)}°C and  {Math.round(weather.daily[2].temp.max)}°C</li>\n           <li>{new Date(weather.daily[3].dt *1000).toLocaleString(\"en-US\", {weekday: \"long\"})}: Between {Math.round(weather.daily[3].temp.min)}°C and  {Math.round(weather.daily[3].temp.max)}°C</li>\n           <li>{new Date(weather.daily[4].dt *1000).toLocaleString(\"en-US\", {weekday: \"long\"})}: Between {Math.round(weather.daily[4].temp.min)}°C and  {Math.round(weather.daily[4].temp.max)}°C</li>\n           <li>{new Date(weather.daily[5].dt *1000).toLocaleString(\"en-US\", {weekday: \"long\"})}: Between {Math.round(weather.daily[5].temp.min)}°C and  {Math.round(weather.daily[5].temp.max)}°C</li>\n           <li>{new Date(weather.daily[6].dt *1000).toLocaleString(\"en-US\", {weekday: \"long\"})}: Between {Math.round(weather.daily[5].temp.min)}°C and  {Math.round(weather.daily[6].temp.max)}°C</li>\n        </ul>\n      </div>\n      <div className=\"share\">\n        <h1>Weather at {weather.lat}, {weather.lon}</h1>\n        </div> \n    </div>\n  );\n}\n\nexport default App;\n",["21","22"],"C:\\Users\\Cosmos\\Desktop\\workspace\\weather-app\\src\\index.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":12,"column":30,"nodeType":"29","messageId":"30","endLine":12,"endColumn":32},{"ruleId":"31","severity":1,"message":"32","line":16,"column":7,"nodeType":"33","messageId":"34","endLine":16,"endColumn":13},{"ruleId":"23","replacedBy":"35"},{"ruleId":"25","replacedBy":"36"},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'images' is assigned a value but never used.","Identifier","unusedVar",["37"],["38"],"no-global-assign","no-unsafe-negation"]